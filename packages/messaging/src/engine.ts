/**
 * Constants associated with an engine.
 */
export interface IEngineConstants {
    /** Prefix for a line comment, e.g. "# " for python. */
    lineCommentPrefix: string;

    /** Packages to display in status bar. This is an ordered list. */
    displayedPackages: string[];

    /**
     * Example code with placeholders for parameterization.
     * `{0}` will be replaced with the wrangling variable, and {1} will be replaced with an example column key.
     */
    codeExample: string;
}

/**
 * The list of known data import operations.
 */
export enum DataImportOperationKey {
    /**
     * Data imported from CSV file.
     */
    ReadCsv = "ReadCsv",

    /**
     * Data imported from parquet file.
     */
    ReadParquet = "ReadParquet",

    /**
     * Data imported from variable in kernel memory.
     */
    Variable = "Variable"
}

/**
 * The list of known column operations. Note that these are only the ones that are natively supported.
 */
export enum OperationKey {
    /**
     * Changes the type of the selected columns.
     */
    ChangeType = "ChangeType",

    /**
     * Creates a copy of a column.
     */
    Clone = "Clone",

    /**
     * (FlashFill rename): Derives a new column based on selected columns.
     */
    StringTransformByExample = "StringTransformByExample",

    /**
     * (FlashFill rename): Derives a new column based on selected columns.
     */
    DateTimeFormattingByExample = "DateTimeFormattingByExample",

    /**
     * (FlashFill rename): Derives a new column based on selected columns.
     */
    ArithmeticByExample = "ArithmeticByExample",

    /**
     * (FlashFill rename): Derives a new column based on selected columns.
     */
    NewColumnByExample = "NewColumnByExample",

    /*
     * Generates code using a GPT model.
     */
    DescribeYourOperation = "DescribeYourOperation",

    /**
     * Drops selected columns.
     */
    Drop = "Drop",

    /**
     * Drops duplicate rows within the selected columns.
     */
    DropDuplicates = "DropDuplicates",

    /**
     * Drops rows with missing values within the selected columns.
     */
    DropNa = "DropNa",

    /**
     * Replaces missing values within the selected columns.
     */
    FillNa = "FillNa",

    /**
     * Scales and translates the values of the selected numerical columns so that they fit between a minimum and maximum value.
     */
    Scale = "Scale",

    /**
     * Renames the selected columns.
     */
    Rename = "Rename",

    /**
     * Replaces all occurrences of a specified value with another within the selected columns.
     */
    ReplaceAll = "ReplaceAll",

    /**
     * Rounds numbers to the specified number of decimal places.
     */
    RoundDecimals = "RoundDecimals",

    /**
     * Rounds numbers down (floor).
     */
    RoundDown = "RoundDown",

    /**
     * Rounds numbers up (ceiling).
     */
    RoundUp = "RoundUp",

    /**
     * Splits a text column into several columns based on a split value.
     */
    SplitText = "SplitText",

    /*
     * Removes leading and trailing whitespaces from a text column.
     */
    StripText = "StripText",

    /*
     * Convert text to lowercase in a text column.
     */
    ConvertToLowercase = "ConvertToLowercase",

    /*
     * Convert text to uppercase in a text column.
     */
    ConvertToUppercase = "ConvertToUppercase",

    /*
     * Convert text to capital case in a text column.
     */
    ConvertToCapitalCase = "ConvertToCapitalCase",

    /*
     * Creates a new column with the length of a text column.
     */
    CalculateTextLength = "CalculateTextLength",

    /**
     * Group by and aggregate over the selected columns.
     */
    GroupByAndAggregate = "GroupByAndAggregate",

    /*
     * Drops all columns except for the selected columns.
     */
    Select = "Select",

    /**
     * Performs "one-hot" encoding on a selected column, splitting categorical data into columns for each category with values of 1 or 0.
     */
    OneHotEncode = "OneHotEncode",

    /**
     * Performs binary encoding on a selected text column, splitting categorical data into columns for each category generated by splitting the text, with values of 1 or 0.
     */
    MultiLabelTextBinarizer = "MultiLabelTextBinarizer",

    /*
     * Sorts the dataframe using one or more columns.
     */
    Sort = "Sort",

    /**
     * Filters rows based on one or more conditions.
     */
    Filter = "Filter",

    /**
     * Creates a column from a formula.
     */
    CreateColumnFromFormula = "CreateColumnFromFormula",

    /**
     * Custom user code.
     */
    CustomOperation = "CustomOperation"
}

/**
 * The list of known row operations. Note that these are only the ones that are natively supported.
 */
export enum RowOperation {
    /**
     * Drops selected rows.
     */
    Drop = "Drop",

    /**
     * Drops all rows with missing values in the data frame.
     */
    DropNa = "DropNa",

    /**
     * Drops all duplicate rows in the data frame.
     */
    DropDuplicates = "DropDuplicates"
}

/**
 * Strategies to be used for preview.
 */
export enum PreviewStrategy {
    /** Generic strategy with no additional invariants added */
    Infer = "Infer",
    /** The two data frames are mostly unrelated, so show the two of them side-by-side */
    SideBySide = "SideBySide",
    /** Invariant: columns or their contents have changed */
    ModifiedColumns = "ModifiedColumns",
    /** Invariant: columns have not changed, and changes to contents are always at the row level */
    AddedOrRemovedRows = "AddedOrRemovedRows",
    /** Do not calculate a preview. Only show the new contents. */
    None = "None",
    /** Only show the new contents, and always cache stats. */
    NoneWithCachedStats = "NoneWithCachedStats"
}
